<%--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at   http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
--%>
<html>
<head>
<title>Questionnaire cleanup</title>
</head>
<body>
<%

response.setContentType('text/html');

/** This will hold the hierarchy from the questionnaire to the current node being verified. */
let hierarchy = new java.util.Stack();

/** This will hold the forms that have been checked out while fixing problems, and which need to be checked in at the end. */
let formsToCheckin = new java.util.HashSet();

/** Remember the version manager for lower overhead. */
let versionManager = currentSession.getWorkspace().getVersionManager();

/** Without confirm=1 in the URL, we don't do any actual changes. */
let dryRun = request.getParameter("confirm") != "1";

/** Without verbose=1 in the URL, we only report conflicts. */
let verbose = request.getParameter("verbose") == "1";

let forceDelete = request.getParameter("forceDelete") == "1";

/**
 * Check if all the references to a question are correctly single- or multi-valued, and in the proper place, and if not, attemts to fix them.
 * If the node is a section, not a question, then it recursively checks all its children.
 *
 * @param node the node to check
 * @param hierarchy the hierarchy from the Questionnaire to the current node's parent
 */
let checkNode = function(node, hierarchy) {
    hierarchy.push(node);

    if (node.isNodeType("cards:Question")) {
        // If it's a question, check all the answers that reference it
        let isMultivalued = node.getProperty("dataType").toString() == "text" && (!node.hasProperty("maxAnswers") || node.getProperty("maxAnswers").toString() != "1");
        out.println("<li>Checking answers for <tt>" + node.getProperty("text") + "</tt>" + (isMultivalued ? " (multivalued)" : "") + "<ul>");
        let refs = node.getReferences();
        while (refs.hasNext()) {
            let answer = refs.nextProperty().getParent();
            isMultivalued && checkAnswerIsMultivalued(answer);
            checkAnswerHierarchy(node, answer, hierarchy);
        }
        out.println("</ul></li>")
    } else {
        // Otherwise, check all the children recursively
        let children = node.getNodes();
        for (var i = 0; i < children.length; ++i) {
            checkNode(children[i], hierarchy);
        }
    }

    hierarchy.pop();
}

/**
 * Check if the answer is multivalued, and if not, fix it.
 *
 * @param answer the answer node
 */
let checkAnswerIsMultivalued = function(answer) {
    if (answer.hasProperty("value") && !answer.getProperty("value").isMultiple()) {
        // Make sure the form is checked out
        let form = findForm(answer);
        // Creating a typed Java array in JS is not obvious:
        let mvalue = java.lang.reflect.Array.newInstance(javax.jcr.Value, 1);
        mvalue[0] = answer.getProperty("value").getValue();
        // The property is already single valued, trying to just set a new value will fail. We must first remove the old value, then re-add it as a multivalued property.
        dryRun || answer.getProperty("value").remove();
        dryRun || answer.setProperty("value", mvalue);
        verbose && out.println("<li>Converted to multivalue in form <a href='/content.html" + form.getPath() + "'>" + getFormName(form) + "</a></li>");
    }
}

/**
 * Check if an answer has the right hierarchy, with all the intermediary sections from the questionnaire present in the form, and if not, attemt to fix it.
 * If the answer is not in the right place, but another node is found in the proper place, and the value of both nodes is the same, then the wrongly placed answer is deleted.
 * If the values are different, then the discrepancy is reported and no further action is performed.
 * If no answer in the proper place exists, then the wrongly placed answer is moved in the right place, which may involve creating new intermediary SectionAnswer nodes.
 * If changes are to be performed, the form is first checked out.
 *
 * @param question the question node
 * @param answer the answer node
 * @param hierarchy the hierarchy from the Questionnaire to the Question, a Stack of nodes
 */
let checkAnswerHierarchy = function(question, answer, hierarchy) {
    // This goes through the questionnaire, upwards from the question node
    let questionnaireNode = question;
    // This goes through the form, upwards from the answer node
    let formNode = answer;
    // Stop when we reach the questionnaire
    while(!questionnaireNode.isNodeType("cards:Questionnaire")) {
        let expectedUUID = questionnaireNode.getProperty("jcr:uuid").getString();
        let actualUUID = formNode.isNodeType("cards:Answer") ? formNode.getProperty("question").getString() : formNode.isNodeType("cards:AnswerSection") ? formNode.getProperty("section").getString() : "";
        if (actualUUID != expectedUUID) {
            // Oh oh, answer is in the wrong place
            let form = findForm(formNode)
            out.println("<li>Found deprecated <a href='" + answer + ".json'>answer</a> in form <a href='/content.html" + form.getPath() + "'>" + getFormName(form) + "</a><ul>");
            // Is there another answer for the same question, but in the correct place?
            let newAnswer = findCorrectAnswer(form, hierarchy);
            if (newAnswer) {
                // Yes, there is; does it have the same value?
                verbose && out.println("<li>Found <a href='" + newAnswer + ".json'>another answer in the correct place</a></li>");
                let oldValue = getAnswerValueAsString(answer);
                let newValue = getAnswerValueAsString(newAnswer);
                if (newValue == oldValue) {
                    // Same value, old answer is deprecated, remove it
                    verbose && out.println("<li style='color: green'>New answer is the same as old answer, deleting old answer</li>");
                    answer.remove();
                } else {
                    // Oh oh, new answer has different value; is any of them empty?
                    if (newValue == "") {
                        // Empty new value, we can just replace it with the old value
                        verbose && out.println("<li style='color: green'>New answer is empty, replacing value with old value and deleting old answer</li>");
                        dryRun || newAnswer.setProperty("value", getAnswerValueAsValue(answer));
                        answer.remove();
                    } else if (oldValue == '') {
                        // Old value is empty, we can remove it
                        verbose && out.println("<li style='color: green'>Old answer is empty, deleting old answer</li>");
                        answer.remove();
                    } else {
                        // Different values, we can not do anything, just report it for manual resolution
                        out.println("<li style='color: red'>Old answer and new answer have different values: " + oldValue + " -> " + newValue + "</li>");
                        // Unless we force the deletion of old answers
                        forceDelete && verbose && out.println("<li style='color: red'>Force deletion is active, deleting old answer</li>");
                        dryRun || forceDelete && answer.remove();
                    }
                }
            } else {
                // No other answer, we can move the misplaced one in the correct place
                verbose && out.println("<li style='color: green'>No other answer, moving old answer to correct place</li>");
                let newParent = createAncestors(form, hierarchy);
                currentSession.move(answer.getPath(), newParent.getPath() + "/" + answer.getName());
            }
            out.println("</ul></li>");
            // Stop processing once we know the answer is misplaced and we handled it
            break;
        }
        // Correct so far, move up the hierarchy
        questionnaireNode = questionnaireNode.getParent();
        formNode = formNode.getParent();
    }
}

/**
 * Find the form that the current node is in, checkout, and return.
 *
 * @param node a node, must be descendant of a Form node
 * @return a Form node
 */
let findForm = function(node) {
    let result = node;
    while(result != null && !result.isNodeType('cards:Form')) {
        result = result.getParent();
    }
    if (!dryRun && !versionManager.isCheckedOut(result.getPath())) {
        versionManager.checkout(result.getPath());
        formsToCheckin.add(result.getPath());
    }
    return result;
}

/**
 * Compute the name of a form, in the format "Subject label / Questionnaire title".
 *
 * @param form a Form node
 * @return the form name as a string
 */
let getFormName = function(form) {
    return result = form.getProperty("subject").getNode().getProperty("identifier") + " / " + form.getProperty("questionnaire").getNode().getProperty("title");
}

/**
 * Find and return an answer node respecting the question hierarchy, if any.
 *
 * @param form the Form node to look in
 * @param hierarchy the hierarchy from the Questionnaire to the Question, a Stack of nodes
 * @return the found answer node, or false if no correctly placed answer exists
 */
let findCorrectAnswer = function(form, hierarchy) {
    // We skip the Questionnaire node
    let it = hierarchy.listIterator(1);
    let result = form;
    while (it.hasNext()) {
        let expectedUUID = it.next().getProperty('jcr:uuid').toString();
        let children = result.getNodes();
        result = false;
        for (let i = 0; i < children.length; ++i) {
            let child = children[i];
            let actualUUID = (child.hasProperty("question") ? child.getProperty("question") : child.hasProperty("section") ? child.getProperty("section") : "").toString();
            if (actualUUID == expectedUUID) {
                result = child;
                break;
            }
        }
        if (!result) {
            return false;
        }
    }
    return result;
}

/**
 * Get the answer value as a string. This correctly handles the case when there is no value, and it converts the value to a simple string even if it isn't one.
 *
 * @param answer an answer node
 * @return a string, empty if there is no value set in the answer
 */
let getAnswerValueAsString = function(answer) {
    return answer.hasProperty("value") ? answer.getProperty("value").toString() : "";
}

/**
 * Get the answer value either as a simple Value, or as an Value[] array. If there is no value at all, an empty string is returned.
 *
 * @param answer an answer node
 * @return Value, Value[], or empty string if there is no value set in the answer
 */
let getAnswerValueAsValue = function(answer) {
    return answer.hasProperty("value") ? (answer.getProperty("value").isMultiple() ? answer.getProperty("value").getValues() : answer.getProperty("value").getValue()) : "";
}

/**
 * Ensure the needed hierarchy for an answer exists and return the expected parent node for the answer.
 *
 * @param form the Form node where the answer must be placed
 * @param hierarchy the hierarchy from the Questionnaire to the Question, a Stack of nodes
 */
let createAncestors = function(form, hierarchy) {
    // We skip the Questinnaire itself, since we are already in the form corresponding to it,
    // and the Question, since it will be handled outside this method
    let it = hierarchy.subList(1, hierarchy.size() - 1).listIterator();
    let current = form;
    // Go down the hierarchy, creating answer sections when needed
    while (it.hasNext()) {
        let ancestor = it.next();
        let ancestorUUID = ancestor.getProperty('jcr:uuid').toString();
        let children = current.getNodes();
        let found = false;
        for (let i = 0; i < children.length; ++i) {
            let child = children[i];
            let childUUID = (child.isNodeType("cards:Answer") ? child.getProperty("question") : child.isNodeType("cards:AnswerSection") ? child.getProperty("section") : "").toString();
            if (childUUID == ancestorUUID) {
                // We found an existing answer section for the current section, descend into it
                current = child;
                found = true;
                break;
            }
        }
        if (!found) {
            // No existing answer section, create one and descend into it
            current = current.addNode(java.util.UUID.randomUUID(), "cards:AnswerSection");
            dryRun || current.setProperty("section", ancestor);
            verbose && out.println("<li>Created AnswerSection for <tt>" + ancestor.getPath() + "</tt></li>");
        }
    }
    return current;
}

// All definitions done, perform the actual work

out.println("<h1>Checking questionnaire " + currentNode.getProperty("title") + "</h1>");

dryRun && out.println("<h2>Dry run, here is what will be done:</h2>");

out.println("<ul>");
checkNode(currentNode, hierarchy);
out.println("</ul>");
if (request.getParameter("confirm") == "1") {
    currentSession.save();
    verbose && out.println("<p>Changes performed, checking in forms:</p><ul>")
    let it = formsToCheckin.iterator();
    while (it.hasNext()) {
        let form = it.next();
        verbose && out.println("<li>Checkin <tt>" + form + "</tt></li>");
        versionManager.checkin(form);
    }
    verbose && out.println("</ul>")
} else {
    out.println("<p><a href='" + request.getPathInfo() + "?confirm=1&" + request.getQueryString() + "'>Confirm?</a></p>");
}
%>
</body>
</html>
